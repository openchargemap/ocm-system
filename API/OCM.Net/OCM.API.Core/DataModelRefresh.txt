Set OCM.Import.Manager.Console as startup project in VS, select OCM.API.Core as the default project in the package manager console

if not installed, Install-Package Microsoft.EntityFrameworkCore.Tools


Run:
Scaffold-DbContext "Server=(local)\SQLEXPRESS;Database=OCM_Live;Trusted_Connection=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force -Context OCMEntities

Edit OCMEntities.cs
----------------
Add:
 public static readonly ILoggerFactory ConsoleLogger = LoggerFactory.Create(builder => { builder.AddConsole(); }); 
      

OnConfiguring

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) 
        { 
            if (!optionsBuilder.IsConfigured) 
            { 
                optionsBuilder.UseLoggerFactory(ConsoleLogger); 
                optionsBuilder.UseLazyLoadingProxies(); 
 
 ar conn = "OCMEntities";
#if DEBUG
                conn = "OCMEntitiesDebug";
#endif
                optionsBuilder.UseSqlServer(System.Configuration.ConfigurationManager.ConnectionStrings[conn].ConnectionString, x =>
                { 
                    x.UseNetTopologySuite(); 
                    x.CommandTimeout((int)TimeSpan.FromMinutes(5).TotalSeconds); 
                    x.EnableRetryOnFailure(3); 
 
                }); 
 
#if DEBUG 
                optionsBuilder.EnableDetailedErrors(true); 
                optionsBuilder.EnableSensitiveDataLogging(true); 
#endif 
            } 
        } 

        --------------

        Add:
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

        -----------

        For ConnectinInfo the delete should be set to cascade, this is to allow removal of connections/equipment:
                 entity.HasOne(d => d.ChargePoint)
                    .WithMany(p => p.ConnectionInfos)
                    .HasForeignKey(d => d.ChargePointId)
                  **  .OnDelete(DeleteBehavior.ClientCascade) **
                    .HasConstraintName("FK_ConnectionInfo_ChargePoint");
